/*
 * Investflex Algo Trading Platform API
 * **Investflex Algo Trading Platform API**. We describe here all available APIs to allow users the execution of trading algorithms in our Algorithmic Trading platform.   All APIs required authentication token to enable its access. Use the **login** API of the **AUTH** section and to generate an authentication token and Authorize the token using the **AUTHORIZE** button.  Use the **environment dropdown** to select the proper environment on which execute the strategies. _http://api.flexscan.com.br_ simulation environment is selected by default. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hernan@investflex.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.junit.Before;
import org.junit.Test;
import org.springframework.util.StringUtils;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.model.ABMessageLgshort;
import io.swagger.client.model.ABMessagelgshortCustomParameters;
import io.swagger.client.model.ABMessagespreadStrategyLegs;
import io.swagger.client.model.BoolFieldYT;
import io.swagger.client.model.Command;
import io.swagger.client.model.Command.CommandEnum;
import io.swagger.client.model.ExchangeT;
import io.swagger.client.model.ExecutionType;
import io.swagger.client.model.InlineResponse202;
import io.swagger.client.model.Login;
import io.swagger.client.model.SideT;
import io.swagger.client.model.StrategyCodeT;
import io.swagger.client.model.StrategyCommandResponse;
import io.swagger.client.model.StrategyRecords;
import io.swagger.client.utils.JackJsonUtils;

/**
 * API tests for AlgosApi
 */
public class AlgosApiTestLongShort {

    private ApiClient apiClient =new ApiClient();
    private AlgosApi api =new AlgosApi(apiClient);
    private String authToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiaHViX2dlb3JnZWNhYnJhbCIsInJvbGUiOiJTVEQiLCJzcG9uc29yIjoiaHViIiwic3J2Z3JwIjoiZGVmYXVsdCIsInNlcnZpY2VzIjpbIkVYRUNfU1JWIiwiRkxFWF9TUlYiXSwiaXNzIjoiaW52ZXN0ZmxleCIsImlhdCI6MTU1ODcxMDQyNiwiZXhwIjoxNTU4NzM5MjI2fQ.yelDQ7JdYIDVJEFRgpajyBOdIcE_i_-LQvw2tfu2e20" ;
    private ABMessageLgshort lgShort ;

    @Before
    public void load() throws ApiException {
    	lgShort = new ABMessageLgshort();
    	lgShort.setName("Estrategia com PETR4");
    	lgShort.setInitTime("09:00:00");
    	lgShort.setEndTime("16:53:00");
    	lgShort.setBasketId("my-basket");
    	lgShort.setExpireDate("20193105");
    	
    	lgShort.setStrategyCode(StrategyCodeT.LGSHORT.toString());
    	lgShort.setText("A comment for my strategy");
    	ABMessagelgshortCustomParameters customParameters = new ABMessagelgshortCustomParameters();
    	customParameters.setTrigger(ABMessagelgshortCustomParameters.TriggerEnum._2.getValue());
    	customParameters.setBookDepth(1);
    	customParameters.setCompensateExec(ABMessagelgshortCustomParameters.CompensateExecEnum._2.getValue());
    	customParameters.setExecutionType(ExecutionType.ENTRY.getValue());
//    	customParameters.setTriggerValue(new BigDecimal(0.01));
    	lgShort.setCustomParameters(customParameters);
    	ABMessagespreadStrategyLegs strategyLegs1 = new ABMessagespreadStrategyLegs();
    	strategyLegs1.setIlegAllocAccount("XBSPgeorgecabral");
    	strategyLegs1.setLegQuantity(100);
    	strategyLegs1.setLegSecurityExchange(ExchangeT.XBMF);
    	strategyLegs1.setLegSide(SideT._1);
    	strategyLegs1.setLegSymbol("PETR4");
    	strategyLegs1.setLegResting(BoolFieldYT.Y);
    	strategyLegs1.setLegMaxClipSize(100);
    	
    	ABMessagespreadStrategyLegs strategyLegs = new ABMessagespreadStrategyLegs();
    	strategyLegs.setIlegAllocAccount("XBSPgeorgecabral");
    	strategyLegs.setLegQuantity(100);
    	strategyLegs.setLegSecurityExchange(ExchangeT.XBMF);
    	strategyLegs.setLegSide(SideT._1);
    	strategyLegs.setLegSymbol("PETR4");
    	strategyLegs.setLegResting(BoolFieldYT.Y);
    	strategyLegs.setLegMaxClipSize(100);
    	List<ABMessagespreadStrategyLegs> listStrategyLeg = new ArrayList<ABMessagespreadStrategyLegs>();
    	listStrategyLeg.add(strategyLegs);
    	listStrategyLeg.add(strategyLegs1);
    	lgShort.setStrategyLegs(listStrategyLeg);
    	
    	if(!StringUtils.isEmpty(authToken)) {
    		apiClient.setAccessToken(authToken);
    		return;
    	}
    	System.out.println("Starting Load");
    	AuthApi loginApi = new AuthApi();
        Login body = new Login();
        body.setPsswd("12qwaszx#E");
        body.setUser("hub_georgecabral");
        authToken = loginApi.getAuthToken(body).getAuthToken();
        apiClient.setAccessToken(authToken);
        System.out.println(authToken);


        
        
    }

    /**
     * Send a new Algo to Execution Server
     *
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    @Test
    public void executeStrategyLgShortTest() throws ApiException, JsonParseException, JsonMappingException, IOException {
            
            InlineResponse202 response = api.executeStrategy(lgShort);
            System.out.println(JackJsonUtils.entityToObjectNode(response));
//        

        // TODO: test validations
    }
//    @Test
//    public void executeStrategySkewTest() throws ApiException, JsonParseException, JsonMappingException, IOException {
//            ABMessageSorder body = new ObjectMapper().readValue(algoSorder, ABMessageSorder.class) ;
//            InlineResponse202 response = api.executeStrategy(body);
//            System.out.println(new ObjectMapper().convertValue(response, JsonNode.class).toString());
////        
//
//        // TODO: test validations
//    }
    /**
     * Send a Command for a running Algo
     *
     * Execute Command available for a given algo (cancel, suspend, resume)
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    @Test
    public void executeStrategyCommandTest() throws ApiException, JsonParseException, JsonMappingException, IOException {
        InlineResponse202 responseSorder = api.executeStrategy(lgShort);
        UUID clOrdID = responseSorder.getClOrdID();
        System.out.println(responseSorder.getClOrdID());
        String action = "cancel";
        String mark = "Cancel Last Order";
        StrategyCommandResponse response = api.executeStrategyCommand(clOrdID, action, mark);
        System.out.println(response.getResponse());
        // TODO: test validations
    }
    /**
     * Return the list of all Commands sent
     *
     * Return the list all Commands sent for current user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommandsTest() throws ApiException {
        StrategyRecords response = api.getCommands();
        response.getRecords().forEach(strategyRecord ->System.out.println(strategyRecord));

        // TODO: test validations
    }
    /**
     * Return list of Strategies created during the current day
     *
     * By passing in the appropriate options, you can search for available strategies in the system 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStrategiesTest() throws ApiException {
        String userName = null;
        String sponsor = null;
        Integer status = 10;
        StrategyCodeT strategyCode = StrategyCodeT.LGSHORT;
        Integer detailed = 1;
        Integer limit = 25;
        StrategyRecords response = api.getStrategies(userName, sponsor, status, strategyCode, detailed, limit);
        response.getRecords().forEach(strategyRecord ->{
	        if(strategyRecord==null||strategyRecord.getUserName()==null||strategyRecord.getUserName().isEmpty()) {
	        	System.out.println("strategyRecord null");
	        }else {
	        	System.out.println(strategyRecord);	
	        }
        });

        // TODO: test validations
    }
    /**
     * Return the Algo with the ClOrdID specified
     *
     * Return the Algo with the ClOrdID specified
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException 
     * @throws JsonMappingException 
     * @throws JsonParseException 
     */
    @Test
    public void getStrategyTest() throws ApiException, JsonParseException, JsonMappingException, IOException {
        InlineResponse202 responseSorder = api.executeStrategy(lgShort);
        UUID clOrdID = responseSorder.getClOrdID();
        System.out.println(responseSorder.getClOrdID());
        StrategyRecords response = api.getStrategy(clOrdID);
        System.out.println(response.getText());

        // TODO: test validations
    }
    /**
     * Post a command not related with specific strategies
     *
     * Execute Commands non related with the flow of execution fo an Algo 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CommandsPostTest() throws ApiException {
        Command body = new Command();
        body.setCommand(CommandEnum.SNAPS);
        String response = api.v1CommandsPost(body);

        // TODO: test validations
    }
}
