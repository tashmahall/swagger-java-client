/*
 * Investflex Algo Trading Platform API
 * **Investflex Algo Trading Platform API**. We describe here all available APIs to allow users the execution of trading algorithms in our Algorithmic Trading platform.   All APIs required authentication token to enable its access. Use the **login** API of the **AUTH** section and to generate an authentication token and Authorize the token using the **AUTHORIZE** button.  Use the **environment dropdown** to select the proper environment on which execute the strategies. _http://api.flexscan.com.br_ simulation environment is selected by default. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hernan@investflex.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.DerivativesSecurityClassT;
import io.swagger.client.model.Error;
import io.swagger.client.model.ExchangeIDT;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.OptionTypeT;
import io.swagger.client.model.SecurityClassT;
import io.swagger.client.model.StrategyRecords;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MarketdataApi
 */
@Ignore
public class MarketdataApiTest {

    private final MarketdataApi api = new MarketdataApi();

    /**
     * Return the Exchange with the exchange_id specified
     *
     * Return the Exchange with the exchange_id specified
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        StrategyRecords response = api.getExchange(exchangeId);

        // TODO: test validations
    }
    /**
     * Return the list of holidays for the Exchange
     *
     * Return the list of holidays for the Exchange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeHolidaysTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        StrategyRecords response = api.getExchangeHolidays(exchangeId);

        // TODO: test validations
    }
    /**
     * Return an Instrument identified by symbol
     *
     * Return the Instrument identified by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        StrategyRecords response = api.getExchangeInstrument(exchangeId, symbol);

        // TODO: test validations
    }
    /**
     * Return the list of derivatives Instruments for an Instrument defined by symbol
     *
     * Return the list of derivatives Instruments trades for an Instrument defined by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentDerivativesTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        LocalDate maturityDate = null;
        BigDecimal initStrike = null;
        BigDecimal endStrike = null;
        DerivativesSecurityClassT securityType = null;
        OptionTypeT optionType = null;
        Integer detailed = null;
        StrategyRecords response = api.getExchangeInstrumentDerivatives(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed);

        // TODO: test validations
    }
    /**
     * Return the list of derivatives symbols for an Instrument defined by symbol
     *
     * Return the list of derivatives symbols for an Instrument defined by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentDerivativesSymbolsTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        LocalDate maturityDate = null;
        BigDecimal initStrike = null;
        BigDecimal endStrike = null;
        DerivativesSecurityClassT securityType = null;
        OptionTypeT optionType = null;
        Integer detailed = null;
        StrategyRecords response = api.getExchangeInstrumentDerivativesSymbols(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed);

        // TODO: test validations
    }
    /**
     * Return the last book for an Instrument defined by symbol
     *
     * Return the last book for an Instrument defined by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentLastBookTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        StrategyRecords response = api.getExchangeInstrumentLastBook(exchangeId, symbol);

        // TODO: test validations
    }
    /**
     * Return the last quote for an Instrument defined by symbol
     *
     * Return the last quote for an Instrument defined by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentLastQuoteTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        Integer detailed = null;
        StrategyRecords response = api.getExchangeInstrumentLastQuote(exchangeId, symbol, detailed);

        // TODO: test validations
    }
    /**
     * Return the last quote snapshot from an Instrument defined by symbol
     *
     * Return the last quote snapshot from an Instrument defined by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentSnapshotTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        Integer detailed = null;
        StrategyRecords response = api.getExchangeInstrumentSnapshot(exchangeId, symbol, detailed);

        // TODO: test validations
    }
    /**
     * Return the trades for an Instrument defined by symbol
     *
     * Return the trades for an Instrument defined by symbol
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentTradesTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        String symbol = null;
        Integer limit = null;
        StrategyRecords response = api.getExchangeInstrumentTrades(exchangeId, symbol, limit);

        // TODO: test validations
    }
    /**
     * Return the list of Instrument definitions available in a given Exchange
     *
     * Return the list of Instrument definitions available in a given Exchange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeInstrumentsTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        SecurityClassT securityClass = null;
        StrategyRecords response = api.getExchangeInstruments(exchangeId, securityClass);

        // TODO: test validations
    }
    /**
     * Return the list of maturity dates of this Exchange for a type of instruments
     *
     * Return the list of maturity dates of this Exchange for a type of instruments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeMaturityDatesTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        SecurityClassT securityClass = null;
        StrategyRecords response = api.getExchangeMaturityDates(exchangeId, securityClass);

        // TODO: test validations
    }
    /**
     * Return the list of Exchange parameters
     *
     * Return the list of Exchange parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeParamsTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        StrategyRecords response = api.getExchangeParams(exchangeId);

        // TODO: test validations
    }
    /**
     * Return the list of symbols available in a given Exchange
     *
     * Return the list of symbols available in a given Exchange. Can be filtered by SecurityClass
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangeSymbolsTest() throws ApiException {
        ExchangeIDT exchangeId = null;
        SecurityClassT securityClass = null;
        StrategyRecords response = api.getExchangeSymbols(exchangeId, securityClass);

        // TODO: test validations
    }
    /**
     * Return list of Exchanges available
     *
     * Return list of Exchanges available for querying 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExchangesTest() throws ApiException {
        StrategyRecords response = api.getExchanges();

        // TODO: test validations
    }
}
