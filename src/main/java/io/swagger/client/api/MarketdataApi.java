/*
 * Investflex Algo Trading Platform API
 * **Investflex Algo Trading Platform API**. We describe here all available APIs to allow users the execution of trading algorithms in our Algorithmic Trading platform.   All APIs required authentication token to enable its access. Use the **login** API of the **AUTH** section and to generate an authentication token and Authorize the token using the **AUTHORIZE** button.  Use the **environment dropdown** to select the proper environment on which execute the strategies. _http://api.flexscan.com.br_ simulation environment is selected by default. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hernan@investflex.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.threeten.bp.LocalDate;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.DerivativesSecurityClassT;
import io.swagger.client.model.ExchangeIDT;
import io.swagger.client.model.OptionTypeT;
import io.swagger.client.model.SecurityClassT;
import io.swagger.client.model.StrategyRecords;

public class MarketdataApi {
    private ApiClient apiClient;

    public MarketdataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketdataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getExchange
     * @param exchangeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeCall(ExchangeIDT exchangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeValidateBeforeCall(ExchangeIDT exchangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchange(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeCall(exchangeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the Exchange with the exchange_id specified
     * Return the Exchange with the exchange_id specified
     * @param exchangeId  (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchange(ExchangeIDT exchangeId) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeWithHttpInfo(exchangeId);
        return resp.getData();
    }

    /**
     * Return the Exchange with the exchange_id specified
     * Return the Exchange with the exchange_id specified
     * @param exchangeId  (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeWithHttpInfo(ExchangeIDT exchangeId) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeValidateBeforeCall(exchangeId, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the Exchange with the exchange_id specified (asynchronously)
     * Return the Exchange with the exchange_id specified
     * @param exchangeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeAsync(ExchangeIDT exchangeId, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeValidateBeforeCall(exchangeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeHolidays
     * @param exchangeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeHolidaysCall(ExchangeIDT exchangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/holidays"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeHolidaysValidateBeforeCall(ExchangeIDT exchangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeHolidays(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeHolidaysCall(exchangeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of holidays for the Exchange
     * Return the list of holidays for the Exchange
     * @param exchangeId  (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeHolidays(ExchangeIDT exchangeId) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeHolidaysWithHttpInfo(exchangeId);
        return resp.getData();
    }

    /**
     * Return the list of holidays for the Exchange
     * Return the list of holidays for the Exchange
     * @param exchangeId  (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeHolidaysWithHttpInfo(ExchangeIDT exchangeId) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeHolidaysValidateBeforeCall(exchangeId, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of holidays for the Exchange (asynchronously)
     * Return the list of holidays for the Exchange
     * @param exchangeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeHolidaysAsync(ExchangeIDT exchangeId, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeHolidaysValidateBeforeCall(exchangeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrument
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentCall(ExchangeIDT exchangeId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentValidateBeforeCall(ExchangeIDT exchangeId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrument(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrument(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentCall(exchangeId, symbol, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return an Instrument identified by symbol
     * Return the Instrument identified by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrument(ExchangeIDT exchangeId, String symbol) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentWithHttpInfo(exchangeId, symbol);
        return resp.getData();
    }

    /**
     * Return an Instrument identified by symbol
     * Return the Instrument identified by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentWithHttpInfo(ExchangeIDT exchangeId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentValidateBeforeCall(exchangeId, symbol, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return an Instrument identified by symbol (asynchronously)
     * Return the Instrument identified by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentAsync(ExchangeIDT exchangeId, String symbol, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentValidateBeforeCall(exchangeId, symbol, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrumentDerivatives
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentDerivativesCall(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}/derivatives"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maturityDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maturityDate", maturityDate));
        if (initStrike != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("initStrike", initStrike));
        if (endStrike != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endStrike", endStrike));
        if (securityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("securityType", securityType));
        if (optionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("optionType", optionType));
        if (detailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detailed", detailed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentDerivativesValidateBeforeCall(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrumentDerivatives(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrumentDerivatives(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentDerivativesCall(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of derivatives Instruments for an Instrument defined by symbol
     * Return the list of derivatives Instruments trades for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrumentDerivatives(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentDerivativesWithHttpInfo(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed);
        return resp.getData();
    }

    /**
     * Return the list of derivatives Instruments for an Instrument defined by symbol
     * Return the list of derivatives Instruments trades for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentDerivativesWithHttpInfo(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentDerivativesValidateBeforeCall(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of derivatives Instruments for an Instrument defined by symbol (asynchronously)
     * Return the list of derivatives Instruments trades for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentDerivativesAsync(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentDerivativesValidateBeforeCall(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrumentDerivativesSymbols
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentDerivativesSymbolsCall(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}/derivatives.symbols"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maturityDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maturityDate", maturityDate));
        if (initStrike != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("initStrike", initStrike));
        if (endStrike != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endStrike", endStrike));
        if (securityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("securityType", securityType));
        if (optionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("optionType", optionType));
        if (detailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detailed", detailed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentDerivativesSymbolsValidateBeforeCall(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrumentDerivativesSymbols(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrumentDerivativesSymbols(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentDerivativesSymbolsCall(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of derivatives symbols for an Instrument defined by symbol
     * Return the list of derivatives symbols for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrumentDerivativesSymbols(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentDerivativesSymbolsWithHttpInfo(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed);
        return resp.getData();
    }

    /**
     * Return the list of derivatives symbols for an Instrument defined by symbol
     * Return the list of derivatives symbols for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentDerivativesSymbolsWithHttpInfo(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentDerivativesSymbolsValidateBeforeCall(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of derivatives symbols for an Instrument defined by symbol (asynchronously)
     * Return the list of derivatives symbols for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param maturityDate  (optional)
     * @param initStrike Strike init interval to filter (optional)
     * @param endStrike Strike end interval to filter (optional)
     * @param securityType The type of derivatives to filter (optional)
     * @param optionType ption Type parameter (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentDerivativesSymbolsAsync(ExchangeIDT exchangeId, String symbol, LocalDate maturityDate, BigDecimal initStrike, BigDecimal endStrike, DerivativesSecurityClassT securityType, OptionTypeT optionType, Integer detailed, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentDerivativesSymbolsValidateBeforeCall(exchangeId, symbol, maturityDate, initStrike, endStrike, securityType, optionType, detailed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrumentLastBook
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentLastBookCall(ExchangeIDT exchangeId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}/books/last"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentLastBookValidateBeforeCall(ExchangeIDT exchangeId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrumentLastBook(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrumentLastBook(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentLastBookCall(exchangeId, symbol, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the last book for an Instrument defined by symbol
     * Return the last book for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrumentLastBook(ExchangeIDT exchangeId, String symbol) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentLastBookWithHttpInfo(exchangeId, symbol);
        return resp.getData();
    }

    /**
     * Return the last book for an Instrument defined by symbol
     * Return the last book for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentLastBookWithHttpInfo(ExchangeIDT exchangeId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentLastBookValidateBeforeCall(exchangeId, symbol, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the last book for an Instrument defined by symbol (asynchronously)
     * Return the last book for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentLastBookAsync(ExchangeIDT exchangeId, String symbol, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentLastBookValidateBeforeCall(exchangeId, symbol, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrumentLastQuote
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentLastQuoteCall(ExchangeIDT exchangeId, String symbol, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}/quotes/last"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detailed", detailed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentLastQuoteValidateBeforeCall(ExchangeIDT exchangeId, String symbol, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrumentLastQuote(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrumentLastQuote(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentLastQuoteCall(exchangeId, symbol, detailed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the last quote for an Instrument defined by symbol
     * Return the last quote for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrumentLastQuote(ExchangeIDT exchangeId, String symbol, Integer detailed) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentLastQuoteWithHttpInfo(exchangeId, symbol, detailed);
        return resp.getData();
    }

    /**
     * Return the last quote for an Instrument defined by symbol
     * Return the last quote for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentLastQuoteWithHttpInfo(ExchangeIDT exchangeId, String symbol, Integer detailed) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentLastQuoteValidateBeforeCall(exchangeId, symbol, detailed, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the last quote for an Instrument defined by symbol (asynchronously)
     * Return the last quote for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentLastQuoteAsync(ExchangeIDT exchangeId, String symbol, Integer detailed, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentLastQuoteValidateBeforeCall(exchangeId, symbol, detailed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrumentSnapshot
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentSnapshotCall(ExchangeIDT exchangeId, String symbol, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}/snapshot"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detailed", detailed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentSnapshotValidateBeforeCall(ExchangeIDT exchangeId, String symbol, Integer detailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrumentSnapshot(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrumentSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentSnapshotCall(exchangeId, symbol, detailed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the last quote snapshot from an Instrument defined by symbol
     * Return the last quote snapshot from an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrumentSnapshot(ExchangeIDT exchangeId, String symbol, Integer detailed) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentSnapshotWithHttpInfo(exchangeId, symbol, detailed);
        return resp.getData();
    }

    /**
     * Return the last quote snapshot from an Instrument defined by symbol
     * Return the last quote snapshot from an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentSnapshotWithHttpInfo(ExchangeIDT exchangeId, String symbol, Integer detailed) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentSnapshotValidateBeforeCall(exchangeId, symbol, detailed, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the last quote snapshot from an Instrument defined by symbol (asynchronously)
     * Return the last quote snapshot from an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentSnapshotAsync(ExchangeIDT exchangeId, String symbol, Integer detailed, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentSnapshotValidateBeforeCall(exchangeId, symbol, detailed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstrumentTrades
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param limit maximum number of records to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentTradesCall(ExchangeIDT exchangeId, String symbol, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments/{symbol}/trades"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "symbol" + "\\}", apiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentTradesValidateBeforeCall(ExchangeIDT exchangeId, String symbol, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstrumentTrades(Async)");
        }
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getExchangeInstrumentTrades(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentTradesCall(exchangeId, symbol, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the trades for an Instrument defined by symbol
     * Return the trades for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param limit maximum number of records to return (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstrumentTrades(ExchangeIDT exchangeId, String symbol, Integer limit) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentTradesWithHttpInfo(exchangeId, symbol, limit);
        return resp.getData();
    }

    /**
     * Return the trades for an Instrument defined by symbol
     * Return the trades for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param limit maximum number of records to return (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentTradesWithHttpInfo(ExchangeIDT exchangeId, String symbol, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentTradesValidateBeforeCall(exchangeId, symbol, limit, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the trades for an Instrument defined by symbol (asynchronously)
     * Return the trades for an Instrument defined by symbol
     * @param exchangeId  (required)
     * @param symbol  (required)
     * @param limit maximum number of records to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentTradesAsync(ExchangeIDT exchangeId, String symbol, Integer limit, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentTradesValidateBeforeCall(exchangeId, symbol, limit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeInstruments
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentsCall(ExchangeIDT exchangeId, SecurityClassT securityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/instruments"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (securityClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("securityClass", securityClass));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeInstrumentsValidateBeforeCall(ExchangeIDT exchangeId, SecurityClassT securityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeInstruments(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeInstrumentsCall(exchangeId, securityClass, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of Instrument definitions available in a given Exchange
     * Return the list of Instrument definitions available in a given Exchange
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeInstruments(ExchangeIDT exchangeId, SecurityClassT securityClass) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeInstrumentsWithHttpInfo(exchangeId, securityClass);
        return resp.getData();
    }

    /**
     * Return the list of Instrument definitions available in a given Exchange
     * Return the list of Instrument definitions available in a given Exchange
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeInstrumentsWithHttpInfo(ExchangeIDT exchangeId, SecurityClassT securityClass) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeInstrumentsValidateBeforeCall(exchangeId, securityClass, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of Instrument definitions available in a given Exchange (asynchronously)
     * Return the list of Instrument definitions available in a given Exchange
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeInstrumentsAsync(ExchangeIDT exchangeId, SecurityClassT securityClass, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeInstrumentsValidateBeforeCall(exchangeId, securityClass, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeMaturityDates
     * @param exchangeId  (required)
     * @param securityClass The type of securities to filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeMaturityDatesCall(ExchangeIDT exchangeId, SecurityClassT securityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/maturitydates"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (securityClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("securityClass", securityClass));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeMaturityDatesValidateBeforeCall(ExchangeIDT exchangeId, SecurityClassT securityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeMaturityDates(Async)");
        }
        // verify the required parameter 'securityClass' is set
        if (securityClass == null) {
            throw new ApiException("Missing the required parameter 'securityClass' when calling getExchangeMaturityDates(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeMaturityDatesCall(exchangeId, securityClass, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of maturity dates of this Exchange for a type of instruments
     * Return the list of maturity dates of this Exchange for a type of instruments
     * @param exchangeId  (required)
     * @param securityClass The type of securities to filter (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeMaturityDates(ExchangeIDT exchangeId, SecurityClassT securityClass) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeMaturityDatesWithHttpInfo(exchangeId, securityClass);
        return resp.getData();
    }

    /**
     * Return the list of maturity dates of this Exchange for a type of instruments
     * Return the list of maturity dates of this Exchange for a type of instruments
     * @param exchangeId  (required)
     * @param securityClass The type of securities to filter (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeMaturityDatesWithHttpInfo(ExchangeIDT exchangeId, SecurityClassT securityClass) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeMaturityDatesValidateBeforeCall(exchangeId, securityClass, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of maturity dates of this Exchange for a type of instruments (asynchronously)
     * Return the list of maturity dates of this Exchange for a type of instruments
     * @param exchangeId  (required)
     * @param securityClass The type of securities to filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeMaturityDatesAsync(ExchangeIDT exchangeId, SecurityClassT securityClass, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeMaturityDatesValidateBeforeCall(exchangeId, securityClass, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeParams
     * @param exchangeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeParamsCall(ExchangeIDT exchangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/params"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeParamsValidateBeforeCall(ExchangeIDT exchangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeParams(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeParamsCall(exchangeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of Exchange parameters
     * Return the list of Exchange parameters
     * @param exchangeId  (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeParams(ExchangeIDT exchangeId) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeParamsWithHttpInfo(exchangeId);
        return resp.getData();
    }

    /**
     * Return the list of Exchange parameters
     * Return the list of Exchange parameters
     * @param exchangeId  (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeParamsWithHttpInfo(ExchangeIDT exchangeId) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeParamsValidateBeforeCall(exchangeId, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of Exchange parameters (asynchronously)
     * Return the list of Exchange parameters
     * @param exchangeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeParamsAsync(ExchangeIDT exchangeId, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeParamsValidateBeforeCall(exchangeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchangeSymbols
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangeSymbolsCall(ExchangeIDT exchangeId, SecurityClassT securityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchange_id}/symbols"
            .replaceAll("\\{" + "exchange_id" + "\\}", apiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (securityClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("securityClass", securityClass));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangeSymbolsValidateBeforeCall(ExchangeIDT exchangeId, SecurityClassT securityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeSymbols(Async)");
        }
        
        com.squareup.okhttp.Call call = getExchangeSymbolsCall(exchangeId, securityClass, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of symbols available in a given Exchange
     * Return the list of symbols available in a given Exchange. Can be filtered by SecurityClass
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchangeSymbols(ExchangeIDT exchangeId, SecurityClassT securityClass) throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangeSymbolsWithHttpInfo(exchangeId, securityClass);
        return resp.getData();
    }

    /**
     * Return the list of symbols available in a given Exchange
     * Return the list of symbols available in a given Exchange. Can be filtered by SecurityClass
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangeSymbolsWithHttpInfo(ExchangeIDT exchangeId, SecurityClassT securityClass) throws ApiException {
        com.squareup.okhttp.Call call = getExchangeSymbolsValidateBeforeCall(exchangeId, securityClass, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of symbols available in a given Exchange (asynchronously)
     * Return the list of symbols available in a given Exchange. Can be filtered by SecurityClass
     * @param exchangeId  (required)
     * @param securityClass Filter results by securityClass (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangeSymbolsAsync(ExchangeIDT exchangeId, SecurityClassT securityClass, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangeSymbolsValidateBeforeCall(exchangeId, securityClass, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getExchanges
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExchangesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/exchanges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
   
    private com.squareup.okhttp.Call getExchangesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getExchangesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return list of Exchanges available
     * Return list of Exchanges available for querying 
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getExchanges() throws ApiException {
        ApiResponse<StrategyRecords> resp = getExchangesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return list of Exchanges available
     * Return list of Exchanges available for querying 
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getExchangesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getExchangesValidateBeforeCall(null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return list of Exchanges available (asynchronously)
     * Return list of Exchanges available for querying 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExchangesAsync(final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExchangesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
}
