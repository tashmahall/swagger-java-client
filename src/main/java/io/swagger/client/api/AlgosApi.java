/*
 * Investflex Algo Trading Platform API
 * **Investflex Algo Trading Platform API**. We describe here all available APIs to allow users the execution of trading algorithms in our Algorithmic Trading platform.   All APIs required authentication token to enable its access. Use the **login** API of the **AUTH** section and to generate an authentication token and Authorize the token using the **AUTHORIZE** button.  Use the **environment dropdown** to select the proper environment on which execute the strategies. _http://api.flexscan.com.br_ simulation environment is selected by default. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hernan@investflex.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.ABMessageArbintf;
import io.swagger.client.model.ABMessageBoffer;
import io.swagger.client.model.ABMessageFinanc;
import io.swagger.client.model.ABMessageFxorder;
import io.swagger.client.model.ABMessageGrddin;
import io.swagger.client.model.ABMessageGrdlin;
import io.swagger.client.model.ABMessageLgshort;
import io.swagger.client.model.ABMessageMit;
import io.swagger.client.model.ABMessageSniper;
import io.swagger.client.model.ABMessageSorder;
import io.swagger.client.model.ABMessageSpread;
import io.swagger.client.model.Command;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse202;
import io.swagger.client.model.StrategyCodeT;
import io.swagger.client.model.StrategyCommandResponse;
import io.swagger.client.model.StrategyRecords;

public class AlgosApi {
    private ApiClient apiClient;

    public AlgosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlgosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

	public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for editStrategy
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editStrategyCall(UUID clOrdID, ABMessageGrddin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos/{ClOrdID}"
            .replaceAll("\\{" + "ClOrdID" + "\\}", apiClient.escapeString(clOrdID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#grddin", "application/json#grdlin"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call editStrategyValidateBeforeCall(UUID clOrdID, ABMessageGrddin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clOrdID' is set
        if (clOrdID == null) {
            throw new ApiException("Missing the required parameter 'clOrdID' when calling editStrategy(Async)");
        }
        
        com.squareup.okhttp.Call call = editStrategyCall(clOrdID, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a Algo Edition for a running strategy to Execution Server
     * Send a Algo Edition for a running strategy to modify strategy execution parameters
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Error editStrategy(UUID clOrdID, ABMessageGrddin body) throws ApiException {
        ApiResponse<Error> resp = editStrategyWithHttpInfo(clOrdID, body);
        return resp.getData();
    }

    /**
     * Send a Algo Edition for a running strategy to Execution Server
     * Send a Algo Edition for a running strategy to modify strategy execution parameters
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Error> editStrategyWithHttpInfo(UUID clOrdID, ABMessageGrddin body) throws ApiException {
        com.squareup.okhttp.Call call = editStrategyValidateBeforeCall(clOrdID, body, null, null);
        return apiClient.execute(call, Error.class);
    }

    /**
     * Send a Algo Edition for a running strategy to Execution Server (asynchronously)
     * Send a Algo Edition for a running strategy to modify strategy execution parameters
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editStrategyAsync(UUID clOrdID, ABMessageGrddin body, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editStrategyValidateBeforeCall(clOrdID, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, Error.class, callback);
        return call;
    }
    /**
     * Build call for editStrategy
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editStrategyCall(UUID clOrdID, ABMessageGrdlin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos/{ClOrdID}"
            .replaceAll("\\{" + "ClOrdID" + "\\}", apiClient.escapeString(clOrdID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#grddin", "application/json#grdlin"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call editStrategyValidateBeforeCall(UUID clOrdID, ABMessageGrdlin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clOrdID' is set
        if (clOrdID == null) {
            throw new ApiException("Missing the required parameter 'clOrdID' when calling editStrategy(Async)");
        }
        
        com.squareup.okhttp.Call call = editStrategyCall(clOrdID, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a Algo Edition for a running strategy to Execution Server
     * Send a Algo Edition for a running strategy to modify strategy execution parameters
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Error editStrategy(UUID clOrdID, ABMessageGrdlin body) throws ApiException {
        ApiResponse<Error> resp = editStrategyWithHttpInfo(clOrdID, body);
        return resp.getData();
    }

    /**
     * Send a Algo Edition for a running strategy to Execution Server
     * Send a Algo Edition for a running strategy to modify strategy execution parameters
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Error> editStrategyWithHttpInfo(UUID clOrdID, ABMessageGrdlin body) throws ApiException {
        com.squareup.okhttp.Call call = editStrategyValidateBeforeCall(clOrdID, body, null, null);
        return apiClient.execute(call, Error.class);
    }

    /**
     * Send a Algo Edition for a running strategy to Execution Server (asynchronously)
     * Send a Algo Edition for a running strategy to modify strategy execution parameters
     * @param clOrdID The ClOrdID identified the Algo to apply the edition to (required)
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editStrategyAsync(UUID clOrdID, ABMessageGrdlin body, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editStrategyValidateBeforeCall(clOrdID, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, Error.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageSorder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
//        final String[] localVarContentTypes = {
//                "application/json"
//            };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageSorder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageSorder body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageSorder body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageSorder body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageFxorder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageFxorder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageFxorder body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageFxorder body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageFxorder body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageBoffer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageBoffer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageBoffer body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageBoffer body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageBoffer body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageSniper body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageSniper body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageSniper body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageSniper body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageSniper body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageMit body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageMit body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageMit body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageMit body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageMit body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageSpread body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageSpread body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageSpread body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageSpread body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageSpread body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageLgshort body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#lgshort"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageLgshort body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageLgshort body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageLgshort body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageLgshort body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageFinanc body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageFinanc body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageFinanc body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageFinanc body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageFinanc body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageGrddin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageGrddin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageGrddin body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageGrddin body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageGrddin body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageGrdlin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageGrdlin body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageGrdlin body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageGrdlin body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageGrdlin body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategy
     * @param body Strategy to execute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCall(ABMessageArbintf body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json#sorder", "application/json#fxorder", "application/json#boffer", "application/json#sniper", "application/json#mit", "application/json#spread", "application/json#lgshort", "application/json#financ", "application/json#grddin", "application/json#grdlin", "application/json#arbintf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyValidateBeforeCall(ABMessageArbintf body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = executeStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse202 executeStrategy(ABMessageArbintf body) throws ApiException {
        ApiResponse<InlineResponse202> resp = executeStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Send a new Algo to Execution Server
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse202> executeStrategyWithHttpInfo(ABMessageArbintf body) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, null, null);
        return apiClient.execute(call, InlineResponse202.class);
    }

    /**
     * Send a new Algo to Execution Server (asynchronously)
     * Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. &lt;br&gt;&lt;br&gt;  Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. &lt;br&gt;&lt;br&gt;  Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. &lt;br&gt;&lt;br&gt;  The stragey codes (that appears after the # on the dropdown values) are &lt;br&gt;&lt;br&gt;  * sorder (Single Order) * grddin (Gradiente Linear) * grdlin (Gradiente Dinamico) * spread (Spreads 2-6 pontas) * lgshort (Long &amp; Short) * financ (Financiamento) * twap (Time Weighting Average Price) * pov (Participation of Volume) * iceberg (Iceberg Order) * boffer (Best Offer) * mit (Market If Touch Order) * skew (Skew) * cvvol (Compra e Venda de Vol) * fxorder (Flex Order) * sniper (Sniper Order) * arbintf (Arbitragem Inteiro Fracionario) 
     * @param body Strategy to execute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyAsync(ABMessageArbintf body, final ApiCallback<InlineResponse202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, InlineResponse202.class, callback);
        return call;
    }
    /**
     * Build call for executeStrategyCommand
     * @param clOrdID The ClOrdID identified the Algo to apply the command to (required)
     * @param action  (optional)
     * @param mark  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCommandCall(UUID clOrdID, String action, String mark, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/algos/{ClOrdID}/commands"
            .replaceAll("\\{" + "ClOrdID" + "\\}", apiClient.escapeString(clOrdID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Action", action));
        if (mark != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Mark", mark));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call executeStrategyCommandValidateBeforeCall(UUID clOrdID, String action, String mark, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clOrdID' is set
        if (clOrdID == null) {
            throw new ApiException("Missing the required parameter 'clOrdID' when calling executeStrategyCommand(Async)");
        }
        
        com.squareup.okhttp.Call call = executeStrategyCommandCall(clOrdID, action, mark, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a Command for a running Algo
     * Execute Command available for a given algo (cancel, suspend, resume)
     * @param clOrdID The ClOrdID identified the Algo to apply the command to (required)
     * @param action  (optional)
     * @param mark  (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyCommandResponse executeStrategyCommand(UUID clOrdID, String action, String mark) throws ApiException {
        ApiResponse<StrategyCommandResponse> resp = executeStrategyCommandWithHttpInfo(clOrdID, action, mark);
        return resp.getData();
    }

    /**
     * Send a Command for a running Algo
     * Execute Command available for a given algo (cancel, suspend, resume)
     * @param clOrdID The ClOrdID identified the Algo to apply the command to (required)
     * @param action  (optional)
     * @param mark  (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyCommandResponse> executeStrategyCommandWithHttpInfo(UUID clOrdID, String action, String mark) throws ApiException {
        com.squareup.okhttp.Call call = executeStrategyCommandValidateBeforeCall(clOrdID, action, mark, null, null);
        return apiClient.execute(call, StrategyCommandResponse.class);
    }

    /**
     * Send a Command for a running Algo (asynchronously)
     * Execute Command available for a given algo (cancel, suspend, resume)
     * @param clOrdID The ClOrdID identified the Algo to apply the command to (required)
     * @param action  (optional)
     * @param mark  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeStrategyCommandAsync(UUID clOrdID, String action, String mark, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeStrategyCommandValidateBeforeCall(clOrdID, action, mark, progressListener, progressRequestListener);
        apiClient.executeAsync(call, Error.class, callback);
        return call;
    }
    /**
     * Build call for getCommands
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommandsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call getCommandsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCommandsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the list of all Commands sent
     * Return the list all Commands sent for current user 
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getCommands() throws ApiException {
        ApiResponse<StrategyRecords> resp = getCommandsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return the list of all Commands sent
     * Return the list all Commands sent for current user 
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getCommandsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCommandsValidateBeforeCall(null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the list of all Commands sent (asynchronously)
     * Return the list all Commands sent for current user 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommandsAsync(final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommandsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getStrategies
     * @param userName Filter results by UserName (ignored for non Admin users) (optional)
     * @param sponsor Filter results by Sponsor (ignored for non Admin users) (optional)
     * @param status Filter results by status of the strategies.  0 &#x3D; NEW, 1 &#x3D; WAITING_APPROVAL, 2 &#x3D; SCHEDULED, 3 &#x3D; RUNNING, 4 &#x3D; UNBALANCED, 5 &#x3D; FINISHED, 6 &#x3D; CANCELING, 7 &#x3D; CANCELED, 8 &#x3D; SUSPENDING, 9 &#x3D; SUSPENDED, 10 &#x3D; PENDINGNEW (optional)
     * @param strategyCode Filter results by Strategy type (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param limit maximum number of records to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStrategiesCall(String userName, String sponsor, Integer status, StrategyCodeT strategyCode, Integer detailed, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/algos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserName", userName));
        if (sponsor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sponsor", sponsor));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Status", status));
        if (strategyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StrategyCode", strategyCode));
        if (detailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detailed", detailed));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call getStrategiesValidateBeforeCall(String userName, String sponsor, Integer status, StrategyCodeT strategyCode, Integer detailed, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getStrategiesCall(userName, sponsor, status, strategyCode, detailed, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return list of Strategies created during the current day
     * By passing in the appropriate options, you can search for available strategies in the system 
     * @param userName Filter results by UserName (ignored for non Admin users) (optional)
     * @param sponsor Filter results by Sponsor (ignored for non Admin users) (optional)
     * @param status Filter results by status of the strategies.  0 &#x3D; NEW, 1 &#x3D; WAITING_APPROVAL, 2 &#x3D; SCHEDULED, 3 &#x3D; RUNNING, 4 &#x3D; UNBALANCED, 5 &#x3D; FINISHED, 6 &#x3D; CANCELING, 7 &#x3D; CANCELED, 8 &#x3D; SUSPENDING, 9 &#x3D; SUSPENDED, 10 &#x3D; PENDINGNEW (optional)
     * @param strategyCode Filter results by Strategy type (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param limit maximum number of records to return (optional)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getStrategies(String userName, String sponsor, Integer status, StrategyCodeT strategyCode, Integer detailed, Integer limit) throws ApiException {
        ApiResponse<StrategyRecords> resp = getStrategiesWithHttpInfo(userName, sponsor, status, strategyCode, detailed, limit);
        return resp.getData();
    }

    /**
     * Return list of Strategies created during the current day
     * By passing in the appropriate options, you can search for available strategies in the system 
     * @param userName Filter results by UserName (ignored for non Admin users) (optional)
     * @param sponsor Filter results by Sponsor (ignored for non Admin users) (optional)
     * @param status Filter results by status of the strategies.  0 &#x3D; NEW, 1 &#x3D; WAITING_APPROVAL, 2 &#x3D; SCHEDULED, 3 &#x3D; RUNNING, 4 &#x3D; UNBALANCED, 5 &#x3D; FINISHED, 6 &#x3D; CANCELING, 7 &#x3D; CANCELED, 8 &#x3D; SUSPENDING, 9 &#x3D; SUSPENDED, 10 &#x3D; PENDINGNEW (optional)
     * @param strategyCode Filter results by Strategy type (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param limit maximum number of records to return (optional)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getStrategiesWithHttpInfo(String userName, String sponsor, Integer status, StrategyCodeT strategyCode, Integer detailed, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getStrategiesValidateBeforeCall(userName, sponsor, status, strategyCode, detailed, limit, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return list of Strategies created during the current day (asynchronously)
     * By passing in the appropriate options, you can search for available strategies in the system 
     * @param userName Filter results by UserName (ignored for non Admin users) (optional)
     * @param sponsor Filter results by Sponsor (ignored for non Admin users) (optional)
     * @param status Filter results by status of the strategies.  0 &#x3D; NEW, 1 &#x3D; WAITING_APPROVAL, 2 &#x3D; SCHEDULED, 3 &#x3D; RUNNING, 4 &#x3D; UNBALANCED, 5 &#x3D; FINISHED, 6 &#x3D; CANCELING, 7 &#x3D; CANCELED, 8 &#x3D; SUSPENDING, 9 &#x3D; SUSPENDED, 10 &#x3D; PENDINGNEW (optional)
     * @param strategyCode Filter results by Strategy type (optional)
     * @param detailed Retrieve detailed (1) or compact (0) data (optional)
     * @param limit maximum number of records to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStrategiesAsync(String userName, String sponsor, Integer status, StrategyCodeT strategyCode, Integer detailed, Integer limit, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStrategiesValidateBeforeCall(userName, sponsor, status, strategyCode, detailed, limit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for getStrategy
     * @param clOrdID The ClOrdID identified the algo to apply the edition to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStrategyCall(UUID clOrdID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/algos/{ClOrdID}"
            .replaceAll("\\{" + "ClOrdID" + "\\}", apiClient.escapeString(clOrdID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    private com.squareup.okhttp.Call getStrategyValidateBeforeCall(UUID clOrdID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clOrdID' is set
        if (clOrdID == null) {
            throw new ApiException("Missing the required parameter 'clOrdID' when calling getStrategy(Async)");
        }
        
        com.squareup.okhttp.Call call = getStrategyCall(clOrdID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return the Algo with the ClOrdID specified
     * Return the Algo with the ClOrdID specified
     * @param clOrdID The ClOrdID identified the algo to apply the edition to (required)
     * @return StrategyRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrategyRecords getStrategy(UUID clOrdID) throws ApiException {
        ApiResponse<StrategyRecords> resp = getStrategyWithHttpInfo(clOrdID);
        return resp.getData();
    }

    /**
     * Return the Algo with the ClOrdID specified
     * Return the Algo with the ClOrdID specified
     * @param clOrdID The ClOrdID identified the algo to apply the edition to (required)
     * @return ApiResponse&lt;StrategyRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrategyRecords> getStrategyWithHttpInfo(UUID clOrdID) throws ApiException {
        com.squareup.okhttp.Call call = getStrategyValidateBeforeCall(clOrdID, null, null);
        return apiClient.execute(call, StrategyRecords.class);
    }

    /**
     * Return the Algo with the ClOrdID specified (asynchronously)
     * Return the Algo with the ClOrdID specified
     * @param clOrdID The ClOrdID identified the algo to apply the edition to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStrategyAsync(UUID clOrdID, final ApiCallback<StrategyRecords> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStrategyValidateBeforeCall(clOrdID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, StrategyRecords.class, callback);
        return call;
    }
    /**
     * Build call for v1CommandsPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CommandsPostCall(Command body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call v1CommandsPostValidateBeforeCall(Command body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v1CommandsPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Post a command not related with specific strategies
     * Execute Commands non related with the flow of execution fo an Algo 
     * @param body  (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String v1CommandsPost(Command body) throws ApiException {
        ApiResponse<String> resp = v1CommandsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Post a command not related with specific strategies
     * Execute Commands non related with the flow of execution fo an Algo 
     * @param body  (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> v1CommandsPostWithHttpInfo(Command body) throws ApiException {
        com.squareup.okhttp.Call call = v1CommandsPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call, String.class);
    }

    /**
     * Post a command not related with specific strategies (asynchronously)
     * Execute Commands non related with the flow of execution fo an Algo 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CommandsPostAsync(Command body, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CommandsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, Error.class, callback);
        return call;
    }
}
